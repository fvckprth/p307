"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }// src/styles.ts
var emptyStyle = {};
var baseHeaderStyles = {
  fontWeight: "500",
  paddingTop: 20
};
var h1 = {
  ...baseHeaderStyles,
  fontSize: "2.5rem"
};
var h2 = {
  ...baseHeaderStyles,
  fontSize: "2rem"
};
var h3 = {
  ...baseHeaderStyles,
  fontSize: "1.75rem"
};
var h4 = {
  ...baseHeaderStyles,
  fontSize: "1.5rem"
};
var h5 = {
  ...baseHeaderStyles,
  fontSize: "1.25rem"
};
var h6 = {
  ...baseHeaderStyles,
  fontSize: "1rem"
};
var bold = {
  fontWeight: "bold"
};
var italic = {
  fontStyle: "italic"
};
var blockQuote = {
  background: "#f9f9f9",
  borderLeft: "10px solid #ccc",
  margin: "1.5em 10px",
  padding: "1em 10px 0.1em 10px",
  quotes: '"\u201C""\u201D""\u2018""\u2019"'
};
var codeInline = {
  color: "#212529",
  fontSize: "87.5%",
  display: "inline",
  background: " #f8f8f8",
  fontFamily: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
};
var codeBlock = {
  ...codeInline,
  paddingTop: 10,
  paddingRight: 10,
  paddingLeft: 10,
  paddingBottom: 1,
  marginBottom: 20,
  background: " #f8f8f8"
};
var link = {
  color: "#007bff",
  textDecoration: "underline",
  backgroundColor: "transparent"
};
var styles = {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  blockQuote,
  bold,
  italic,
  link,
  codeBlock: { ...codeBlock, wordWrap: "break-word" },
  codeInline: { ...codeInline, wordWrap: "break-word" },
  p: emptyStyle,
  li: emptyStyle,
  ul: emptyStyle,
  image: emptyStyle,
  br: emptyStyle,
  hr: emptyStyle,
  table: emptyStyle,
  thead: emptyStyle,
  tbody: emptyStyle,
  th: emptyStyle,
  td: emptyStyle,
  tr: emptyStyle,
  strikethrough: emptyStyle
};

// src/patterns.ts
var patterns = {
  h1: /^#\s+(.+)$/gm,
  h2: /^##\s+(.+)$/gm,
  h3: /^###\s+(.+)$/gm,
  h4: /^####\s+(.+)$/gm,
  h5: /^#####\s+(.+)$/gm,
  h6: /^######\s+(.+)$/gm,
  p: /((\n|^)(?!\n)((?!<\/?(h|ul|ol|pre|div|blockquote)[>\s]).)+(\n|$)+)+/gm,
  bold: /\*\*(.+?)\*\*/g,
  italic: /\*(.+?)\*/g,
  li: /^\s*[-|\*]\s+(.*)$/gm,
  ul: /(<li.*<\/li>)(?![\s\S]*<\/ul>)/gs,
  image: /!\[(.*?)\]\((.*?)\)/g,
  link: /\[(.+?)\]\((.*?)\)/g,
  codeBlocks: /```(.+?)```/gs,
  codeInline: /`(.+?)`/g,
  br: /  \n/g,
  hr: /^-{3,}$/gm,
  table: /((?:^|\n)(?:\|[^\n]*?)+\|\n)((?:^|\n)(?:\|(?:[\s\S]*?[^\\])?\|[^\n]*)+\|\n)+/gm,
  strikethrough: /~~(.+?)~~/g
};

// src/utils.ts
function camelToKebabCase(str) {
  return str.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
}
function parseCssInJsToInlineCss(cssProperties) {
  if (!cssProperties)
    return "";
  return Object.entries(cssProperties).map(([property, value]) => `${camelToKebabCase(property)}:${value}`).join(";");
}
function parseMarkdownToReactEmail(markdown, customStyles) {
  const finalStyles = { ...styles, ...customStyles };
  let reactMailTemplate = "";
  reactMailTemplate = markdown.replace(
    patterns.h1,
    `<Heading as="h1" style={${JSON.stringify(finalStyles.h1)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h2,
    `<Heading as="h2" style={${JSON.stringify(finalStyles.h2)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h3,
    `<Heading as="h3" style={${JSON.stringify(finalStyles.h3)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h4,
    `<Heading as="h4" style={${JSON.stringify(finalStyles.h4)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h5,
    `<Heading as="h5" style={${JSON.stringify(finalStyles.h5)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h6,
    `<Heading as="h6" style={${JSON.stringify(finalStyles.h6)}}>$1</Heading>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.table,
    (match) => {
      const rows = match.trim().split("\n");
      const headers = rows[0].split("|").slice(1, -1).map((cell) => cell.trim());
      const alignments = rows[1].split("|").slice(1, -1).map((cell) => {
        const align = cell.trim().toLowerCase();
        return align === ":--" ? "left" : align === "--:" ? "right" : "center";
      });
      const body = rows.slice(2).map((row) => {
        const cells = row.split("|").slice(1, -1).map((cell) => cell.trim());
        return `<tr style={${JSON.stringify(finalStyles.tr)}}>${cells.map(
          (cell, index) => `<td style={${JSON.stringify(finalStyles.td)}} align="${alignments[index]}">${cell}</td>`
        ).join("")}</tr>`;
      }).join("");
      const table = `<table style={${JSON.stringify(
        finalStyles.table
      )}}><thead style={${JSON.stringify(
        finalStyles.thead
      )}}><tr style={${JSON.stringify(finalStyles.tr)}}>${headers.map(
        (header, index) => `<th style={${JSON.stringify(finalStyles.th)}} align="${alignments[index]}">${header}</th>`
      ).join("")}</tr></thead><tbody style={${JSON.stringify(
        finalStyles.tbody
      )}}>${body}</tbody></table>`;
      return table;
    }
  );
  reactMailTemplate = reactMailTemplate.replace(patterns.p, "$&");
  reactMailTemplate = reactMailTemplate.replace(
    patterns.strikethrough,
    `<del style={${JSON.stringify(finalStyles.strikethrough)}}>$1</del>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.bold,
    `<Text style={${JSON.stringify(finalStyles.bold)}}>$1</Text>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.italic,
    `<Text style={${JSON.stringify(finalStyles.italic)}}>$1</Text>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.li,
    `<li style={${JSON.stringify(finalStyles.li)}}>$1</li>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.ul,
    `<ul style={${JSON.stringify(finalStyles.ul)}}>$&</ul>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.image,
    `<Img style={${JSON.stringify(finalStyles.image)}} alt="$1" src="$2" />`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.link,
    `<Link href="$2" style={${JSON.stringify(finalStyles.link)}}>$1</Link>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.codeBlocks,
    `<pre style={${JSON.stringify(
      finalStyles.codeBlock
    )}}><Text>${`{\`$1\`}`}</Text></pre>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.codeInline,
    `<Text style={${JSON.stringify(finalStyles.codeInline)}}>$1</Text>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    /^>\s+(.+)$/gm,
    `<Text style={${JSON.stringify(finalStyles.blockQuote)}}>$1</Text>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.br,
    `<br style={${JSON.stringify(finalStyles.br)}} />`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.hr,
    `<Hr style={${JSON.stringify(finalStyles.hr)}} />`
  );
  reactMailTemplate = `<Section>${reactMailTemplate}</Section>`;
  return reactMailTemplate;
}
function parseMarkdownToReactEmailJSX(markdown, customStyles) {
  const finalStyles = { ...styles, ...customStyles };
  let reactMailTemplate = "";
  reactMailTemplate = markdown.replace(
    patterns.h1,
    `<h1 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h1
    )}">$1</h1>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h2,
    `<h2 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h2
    )}">$1</h2>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h3,
    `<h3 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h3
    )}">$1</h3>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h4,
    `<h4 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h4
    )}">$1</h4>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h5,
    `<h5 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h5
    )}">$1</h5>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.h6,
    `<h6 data-id="react-email-heading" style="${parseCssInJsToInlineCss(
      finalStyles.h6
    )}">$1</h6>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.table,
    (match) => {
      const rows = match.trim().split("\n");
      const headers = rows[0].split("|").slice(1, -1).map((cell) => cell.trim());
      const alignments = rows[1].split("|").slice(1, -1).map((cell) => {
        const align = cell.trim().toLowerCase();
        return align === ":--" ? "left" : align === "--:" ? "right" : "center";
      });
      const body = rows.slice(2).map((row) => {
        const cells = row.split("|").slice(1, -1).map((cell) => cell.trim());
        return `<tr style="${parseCssInJsToInlineCss(finalStyles.tr)}">${cells.map(
          (cell, index) => `<td style="${parseCssInJsToInlineCss(
            finalStyles.td
          )}" align="${alignments[index]}">${cell}</td>`
        ).join("")}</tr>`;
      }).join("");
      const table = `<table style="${parseCssInJsToInlineCss(
        finalStyles.table
      )}"><thead style="${parseCssInJsToInlineCss(
        finalStyles.thead
      )}"><tr style="${parseCssInJsToInlineCss(finalStyles.tr)}">${headers.map(
        (header, index) => `<th style="${parseCssInJsToInlineCss(finalStyles.th)}" align="${alignments[index]}">${header}</th>`
      ).join("")}</tr></thead><tbody style="${parseCssInJsToInlineCss(
        finalStyles.tbody
      )}">${body}</tbody></table>`;
      return table;
    }
  );
  reactMailTemplate = reactMailTemplate.replace(patterns.p, "$&");
  reactMailTemplate = reactMailTemplate.replace(
    patterns.strikethrough,
    `<del style="${parseCssInJsToInlineCss(
      finalStyles.strikethrough
    )}">$1</del>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.bold,
    `<p data-id="react-email-text" style="${parseCssInJsToInlineCss(
      finalStyles.bold
    )}">$1</p>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.italic,
    `<p data-id="react-email-text" style="${parseCssInJsToInlineCss(
      finalStyles.italic
    )}">$1</p>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.li,
    `<li style="${parseCssInJsToInlineCss(finalStyles.li)}">$1</li>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.ul,
    `<ul style="${parseCssInJsToInlineCss(finalStyles.ul)}">$&</ul>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.image,
    `<img style="${parseCssInJsToInlineCss(
      finalStyles.image
    )}" alt="$1" src="$2" />`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.link,
    `<a data-id="react-email-link" target="_blank" href="$2" style="${parseCssInJsToInlineCss(
      finalStyles.link
    )}">$1</a>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.codeBlocks,
    `<pre style="${parseCssInJsToInlineCss(
      finalStyles.codeBlock
    )}"><p data-id="react-email-text">${`{\`$1\`}`}</p></pre>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.codeInline,
    `<p data-id="react-email-text" style="${parseCssInJsToInlineCss(
      finalStyles.codeInline
    )}">$1</p>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    /^>\s+(.+)$/gm,
    `<p data-id="react-email-text" style="${parseCssInJsToInlineCss(
      finalStyles.blockQuote
    )}">$1</p>`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.br,
    `<br style="${parseCssInJsToInlineCss(finalStyles.br)}" />`
  );
  reactMailTemplate = reactMailTemplate.replace(
    patterns.hr,
    `<hr data-id="react-email-hr" style="${parseCssInJsToInlineCss(
      finalStyles.hr
    )}" />`
  );
  return reactMailTemplate;
}

// src/components/reactEmailMarkdown.tsx
var _react = require('react'); var React = _interopRequireWildcard(_react);
var ReactEmailMarkdown = ({
  markdown,
  markdownCustomStyles,
  markdownContainerStyles
}) => {
  const parsedMarkdown = parseMarkdownToReactEmailJSX(
    markdown,
    markdownCustomStyles
  );
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      style: markdownContainerStyles,
      dangerouslySetInnerHTML: { __html: parsedMarkdown }
    }
  );
};








exports.ReactEmailMarkdown = ReactEmailMarkdown; exports.camelToKebabCase = camelToKebabCase; exports.parseCssInJsToInlineCss = parseCssInJsToInlineCss; exports.parseMarkdownToReactEmail = parseMarkdownToReactEmail; exports.parseMarkdownToReactEmailJSX = parseMarkdownToReactEmailJSX; exports.patterns = patterns; exports.styles = styles;
//# sourceMappingURL=index.js.map