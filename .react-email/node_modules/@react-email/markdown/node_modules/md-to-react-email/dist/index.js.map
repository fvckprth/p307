{"version":3,"sources":["../src/styles.ts","../src/patterns.ts","../src/utils.ts","../src/components/reactEmailMarkdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import { StylesType } from \"./types\";\n\nconst emptyStyle = {};\n\nconst baseHeaderStyles = {\n  fontWeight: \"500\",\n  paddingTop: 20,\n};\n\nconst h1 = {\n  ...baseHeaderStyles,\n  fontSize: \"2.5rem\",\n};\n\nconst h2 = {\n  ...baseHeaderStyles,\n  fontSize: \"2rem\",\n};\nconst h3 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.75rem\",\n};\nconst h4 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.5rem\",\n};\nconst h5 = {\n  ...baseHeaderStyles,\n  fontSize: \"1.25rem\",\n};\nconst h6 = {\n  ...baseHeaderStyles,\n  fontSize: \"1rem\",\n};\n\nconst bold = {\n  fontWeight: \"bold\",\n};\n\nconst italic = {\n  fontStyle: \"italic\",\n};\n\nconst blockQuote = {\n  background: \"#f9f9f9\",\n  borderLeft: \"10px solid #ccc\",\n  margin: \"1.5em 10px\",\n  padding: \"1em 10px 0.1em 10px\",\n  quotes: '\"\\u201C\"\"\\u201D\"\"\\u2018\"\"\\u2019\"',\n};\n\nconst codeInline = {\n  color: \"#212529\",\n  fontSize: \"87.5%\",\n  display: \"inline\",\n  background: \" #f8f8f8\",\n  fontFamily: `SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace`,\n};\n\nconst codeBlock = {\n  ...codeInline,\n  paddingTop: 10,\n  paddingRight: 10,\n  paddingLeft: 10,\n  paddingBottom: 1,\n  marginBottom: 20,\n  background: \" #f8f8f8\",\n};\n\nconst link = {\n  color: \"#007bff\",\n  textDecoration: \"underline\",\n  backgroundColor: \"transparent\",\n};\n\nexport const styles: StylesType = {\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  blockQuote,\n  bold,\n  italic,\n  link,\n  codeBlock: { ...codeBlock, wordWrap: \"break-word\" },\n  codeInline: { ...codeInline, wordWrap: \"break-word\" },\n  p: emptyStyle,\n  li: emptyStyle,\n  ul: emptyStyle,\n  image: emptyStyle,\n  br: emptyStyle,\n  hr: emptyStyle,\n  table: emptyStyle,\n  thead: emptyStyle,\n  tbody: emptyStyle,\n  th: emptyStyle,\n  td: emptyStyle,\n  tr: emptyStyle,\n  strikethrough: emptyStyle,\n};\n","export const patterns = {\n  h1: /^#\\s+(.+)$/gm,\n  h2: /^##\\s+(.+)$/gm,\n  h3: /^###\\s+(.+)$/gm,\n  h4: /^####\\s+(.+)$/gm,\n  h5: /^#####\\s+(.+)$/gm,\n  h6: /^######\\s+(.+)$/gm,\n  p: /((\\n|^)(?!\\n)((?!<\\/?(h|ul|ol|pre|div|blockquote)[>\\s]).)+(\\n|$)+)+/gm,\n  bold: /\\*\\*(.+?)\\*\\*/g,\n  italic: /\\*(.+?)\\*/g,\n  li: /^\\s*[-|\\*]\\s+(.*)$/gm,\n  ul: /(<li.*<\\/li>)(?![\\s\\S]*<\\/ul>)/gs,\n  image: /!\\[(.*?)\\]\\((.*?)\\)/g,\n  link: /\\[(.+?)\\]\\((.*?)\\)/g,\n  codeBlocks: /```(.+?)```/gs,\n  codeInline: /`(.+?)`/g,\n  br: /  \\n/g,\n  hr: /^-{3,}$/gm,\n  table:\n    /((?:^|\\n)(?:\\|[^\\n]*?)+\\|\\n)((?:^|\\n)(?:\\|(?:[\\s\\S]*?[^\\\\])?\\|[^\\n]*)+\\|\\n)+/gm,\n  strikethrough: /~~(.+?)~~/g,\n};\n","import { patterns } from \"./patterns\";\nimport { styles } from \"./styles\";\nimport { StylesType } from \"./types\";\n\nimport { CSSProperties } from \"react\";\n\nexport function camelToKebabCase(str: string): string {\n  return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nexport function parseCssInJsToInlineCss(\n  cssProperties: CSSProperties | undefined\n): string {\n  if (!cssProperties) return \"\";\n\n  return Object.entries(cssProperties)\n    .map(([property, value]) => `${camelToKebabCase(property)}:${value}`)\n    .join(\";\");\n}\n\nexport function parseMarkdownToReactEmail(\n  markdown: string,\n  customStyles?: StylesType\n): string {\n  const finalStyles = { ...styles, ...customStyles };\n  let reactMailTemplate = \"\";\n\n  // Handle headings (e.g., # Heading)\n  reactMailTemplate = markdown.replace(\n    patterns.h1,\n    `<Heading as=\"h1\" style={${JSON.stringify(finalStyles.h1)}}>$1</Heading>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h2,\n    `<Heading as=\"h2\" style={${JSON.stringify(finalStyles.h2)}}>$1</Heading>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h3,\n    `<Heading as=\"h3\" style={${JSON.stringify(finalStyles.h3)}}>$1</Heading>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h4,\n    `<Heading as=\"h4\" style={${JSON.stringify(finalStyles.h4)}}>$1</Heading>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h5,\n    `<Heading as=\"h5\" style={${JSON.stringify(finalStyles.h5)}}>$1</Heading>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h6,\n    `<Heading as=\"h6\" style={${JSON.stringify(finalStyles.h6)}}>$1</Heading>`\n  );\n\n  // Handle Tables from GFM\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.table,\n    (match: string) => {\n      const rows = match.trim().split(\"\\n\");\n      const headers = rows[0]\n        .split(\"|\")\n        .slice(1, -1)\n        .map((cell) => cell.trim());\n      const alignments = rows[1]\n        .split(\"|\")\n        .slice(1, -1)\n        .map((cell) => {\n          const align = cell.trim().toLowerCase();\n          return align === \":--\"\n            ? \"left\"\n            : align === \"--:\"\n            ? \"right\"\n            : \"center\";\n        });\n      const body = rows\n        .slice(2)\n        .map((row) => {\n          const cells = row\n            .split(\"|\")\n            .slice(1, -1)\n            .map((cell) => cell.trim());\n          return `<tr style={${JSON.stringify(finalStyles.tr)}}>${cells\n            .map(\n              (cell, index) =>\n                `<td style={${JSON.stringify(finalStyles.td)}} align=\"${\n                  alignments[index]\n                }\">${cell}</td>`\n            )\n            .join(\"\")}</tr>`;\n        })\n        .join(\"\");\n\n      const table = `<table style={${JSON.stringify(\n        finalStyles.table\n      )}}><thead style={${JSON.stringify(\n        finalStyles.thead\n      )}}><tr style={${JSON.stringify(finalStyles.tr)}}>${headers\n        .map(\n          (header, index) =>\n            `<th style={${JSON.stringify(finalStyles.th)}} align=\"${\n              alignments[index]\n            }\">${header}</th>`\n        )\n        .join(\"\")}</tr></thead><tbody style={${JSON.stringify(\n        finalStyles.tbody\n      )}}>${body}</tbody></table>`;\n      return table;\n    }\n  );\n\n  // Handle paragraphs\n  reactMailTemplate = reactMailTemplate.replace(patterns.p, \"$&\");\n\n  // Handle strikethrough\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.strikethrough,\n    `<del style={${JSON.stringify(finalStyles.strikethrough)}}>$1</del>`\n  );\n\n  // Handle bold text (e.g., **bold**)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.bold,\n    `<Text style={${JSON.stringify(finalStyles.bold)}}>$1</Text>`\n  );\n\n  // Handle italic text (e.g., *italic*)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.italic,\n    `<Text style={${JSON.stringify(finalStyles.italic)}}>$1</Text>`\n  );\n\n  // Handle lists (unordered and ordered)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.li,\n    `<li style={${JSON.stringify(finalStyles.li)}}>$1</li>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.ul,\n    `<ul style={${JSON.stringify(finalStyles.ul)}}>$&</ul>`\n  );\n\n  // Handle images (e.g., ![alt text](url))\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.image,\n    `<Img style={${JSON.stringify(finalStyles.image)}} alt=\"$1\" src=\"$2\" />`\n  );\n\n  // Handle links (e.g., [link text](url))\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.link,\n    `<Link href=\"$2\" style={${JSON.stringify(finalStyles.link)}}>$1</Link>`\n  );\n\n  // Handle code blocks (e.g., ```code```)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.codeBlocks,\n    `<pre style={${JSON.stringify(\n      finalStyles.codeBlock\n    )}}><Text>${`{\\`$1\\`}`}</Text></pre>`\n  );\n\n  // Handle inline code (e.g., `code`)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.codeInline,\n    `<Text style={${JSON.stringify(finalStyles.codeInline)}}>$1</Text>`\n  );\n\n  // Handle block quotes\n  reactMailTemplate = reactMailTemplate.replace(\n    /^>\\s+(.+)$/gm,\n    `<Text style={${JSON.stringify(finalStyles.blockQuote)}}>$1</Text>`\n  );\n\n  // Handle line breaks (e.g., <br />)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.br,\n    `<br style={${JSON.stringify(finalStyles.br)}} />`\n  );\n\n  // Handle horizontal rules (e.g., ---)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.hr,\n    `<Hr style={${JSON.stringify(finalStyles.hr)}} />`\n  );\n\n  // Wrap content in a section tag\n  reactMailTemplate = `<Section>${reactMailTemplate}</Section>`;\n\n  return reactMailTemplate;\n}\n\nexport function parseMarkdownToReactEmailJSX(\n  markdown: string,\n  customStyles?: StylesType\n): string {\n  const finalStyles = { ...styles, ...customStyles };\n  let reactMailTemplate = \"\";\n\n  // Handle headings (e.g., # Heading)\n  reactMailTemplate = markdown.replace(\n    patterns.h1,\n    `<h1 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h1\n    )}\">$1</h1>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h2,\n    `<h2 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h2\n    )}\">$1</h2>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h3,\n    `<h3 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h3\n    )}\">$1</h3>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h4,\n    `<h4 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h4\n    )}\">$1</h4>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h5,\n    `<h5 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h5\n    )}\">$1</h5>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.h6,\n    `<h6 data-id=\"react-email-heading\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.h6\n    )}\">$1</h6>`\n  );\n\n  // Handle Tables from GFM\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.table,\n    (match: string) => {\n      const rows = match.trim().split(\"\\n\");\n      const headers = rows[0]\n        .split(\"|\")\n        .slice(1, -1)\n        .map((cell) => cell.trim());\n      const alignments = rows[1]\n        .split(\"|\")\n        .slice(1, -1)\n        .map((cell) => {\n          const align = cell.trim().toLowerCase();\n          return align === \":--\"\n            ? \"left\"\n            : align === \"--:\"\n            ? \"right\"\n            : \"center\";\n        });\n      const body = rows\n        .slice(2)\n        .map((row) => {\n          const cells = row\n            .split(\"|\")\n            .slice(1, -1)\n            .map((cell) => cell.trim());\n          return `<tr style=\"${parseCssInJsToInlineCss(finalStyles.tr)}\">${cells\n            .map(\n              (cell, index) =>\n                `<td style=\"${parseCssInJsToInlineCss(\n                  finalStyles.td\n                )}\" align=\"${alignments[index]}\">${cell}</td>`\n            )\n            .join(\"\")}</tr>`;\n        })\n        .join(\"\");\n\n      const table = `<table style=\"${parseCssInJsToInlineCss(\n        finalStyles.table\n      )}\"><thead style=\"${parseCssInJsToInlineCss(\n        finalStyles.thead\n      )}\"><tr style=\"${parseCssInJsToInlineCss(finalStyles.tr)}\">${headers\n        .map(\n          (header, index) =>\n            `<th style=\"${parseCssInJsToInlineCss(finalStyles.th)}\" align=\"${\n              alignments[index]\n            }\">${header}</th>`\n        )\n        .join(\"\")}</tr></thead><tbody style=\"${parseCssInJsToInlineCss(\n        finalStyles.tbody\n      )}\">${body}</tbody></table>`;\n      return table;\n    }\n  );\n\n  // Handle paragraphs\n  reactMailTemplate = reactMailTemplate.replace(patterns.p, \"$&\");\n\n  // Handle strikethrough\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.strikethrough,\n    `<del style=\"${parseCssInJsToInlineCss(\n      finalStyles.strikethrough\n    )}\">$1</del>`\n  );\n\n  // Handle bold text (e.g., **bold**)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.bold,\n    `<p data-id=\"react-email-text\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.bold\n    )}\">$1</p>`\n  );\n\n  // Handle italic text (e.g., *italic*)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.italic,\n    `<p data-id=\"react-email-text\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.italic\n    )}\">$1</p>`\n  );\n\n  // Handle lists (unordered and ordered)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.li,\n    `<li style=\"${parseCssInJsToInlineCss(finalStyles.li)}\">$1</li>`\n  );\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.ul,\n    `<ul style=\"${parseCssInJsToInlineCss(finalStyles.ul)}\">$&</ul>`\n  );\n\n  // Handle images (e.g., ![alt text](url))\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.image,\n    `<img style=\"${parseCssInJsToInlineCss(\n      finalStyles.image\n    )}\" alt=\"$1\" src=\"$2\" />`\n  );\n\n  // Handle links (e.g., [link text](url))\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.link,\n    `<a data-id=\"react-email-link\" target=\"_blank\" href=\"$2\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.link\n    )}\">$1</a>`\n  );\n\n  // Handle code blocks (e.g., ```code```)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.codeBlocks,\n    `<pre style=\"${parseCssInJsToInlineCss(\n      finalStyles.codeBlock\n    )}\"><p data-id=\"react-email-text\">${`{\\`$1\\`}`}</p></pre>`\n  );\n\n  // Handle inline code (e.g., `code`)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.codeInline,\n    `<p data-id=\"react-email-text\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.codeInline\n    )}\">$1</p>`\n  );\n\n  // Handle block quotes\n  reactMailTemplate = reactMailTemplate.replace(\n    /^>\\s+(.+)$/gm,\n    `<p data-id=\"react-email-text\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.blockQuote\n    )}\">$1</p>`\n  );\n\n  // Handle line breaks (e.g., <br />)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.br,\n    `<br style=\"${parseCssInJsToInlineCss(finalStyles.br)}\" />`\n  );\n\n  // Handle horizontal rules (e.g., ---)\n  reactMailTemplate = reactMailTemplate.replace(\n    patterns.hr,\n    `<hr data-id=\"react-email-hr\" style=\"${parseCssInJsToInlineCss(\n      finalStyles.hr\n    )}\" />`\n  );\n\n  return reactMailTemplate;\n}\n","import * as React from \"react\";\nimport { StylesType } from \"../types\";\nimport { parseMarkdownToReactEmailJSX } from \"../utils\";\n\ninterface ReactEmailMarkdownProps {\n  markdown: string;\n  markdownCustomStyles?: StylesType;\n  markdownContainerStyles?: React.CSSProperties;\n}\n\nexport const ReactEmailMarkdown: React.FC<ReactEmailMarkdownProps> = ({\n  markdown,\n  markdownCustomStyles,\n  markdownContainerStyles,\n}) => {\n  const parsedMarkdown = parseMarkdownToReactEmailJSX(\n    markdown,\n    markdownCustomStyles\n  );\n\n  return (\n    <div\n      style={markdownContainerStyles}\n      dangerouslySetInnerHTML={{ __html: parsedMarkdown }}\n    />\n  );\n};\n"]}